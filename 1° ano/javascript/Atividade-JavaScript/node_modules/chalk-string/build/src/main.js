import colorsOption from"colors-option";
import isPlainObj from"is-plain-obj";

import{ARGS_METHODS}from"./args.js";



const chalkString=(opts={})=>{
if(!isPlainObj(opts)){
throw new TypeError(`Options must be a plain object: ${opts}`)
}

const chalk=colorsOption(opts);
return addStyles.bind(undefined,chalk)
};

export default chalkString;

const addStyles=(chalk,styles,string)=>{
if(typeof styles!=="string"){
throw new TypeError(`Styles must be a string, not: ${styles}`)
}

if(typeof string!=="string"){
throw new TypeError(`Argument must be a string, not: ${string}`)
}

const chalkMethod=styles.
trim().
split(STYLE_SEPARATOR).
reduce(useChalkMethod,chalk);
return chalkMethod(string)
};

const STYLE_SEPARATOR=/\s+/u;



const useChalkMethod=(chalk,style)=>{
const[method,...args]=style.split(ARGS_SEPARATOR);

if(typeof chalk[method]!=="function"){
throw new TypeError(`Style "${style}" is unknown.`)
}

return method in ARGS_METHODS?
getArgsChalkMethod(chalk,method,args):
getNoArgsChalkMethod(chalk,method,args)
};

const ARGS_SEPARATOR="-";



const getArgsChalkMethod=(chalk,method,args)=>{
const argsA=ARGS_METHODS[method](args,method);
return chalk[method](...argsA)
};


const getNoArgsChalkMethod=(chalk,method,args)=>{
if(args.length!==0){
throw new TypeError(`No arguments "${args[0]}" allowed with "${method}"`)
}

return chalk[method]
};